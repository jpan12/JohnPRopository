//1 interface
public interface IJDataProvider
{
    string GetJSonDataType();
    String GetJSonNewData()
}
//2 implemen

public class JsonDataAccess: IJDataProvider 
{
    public string Type { get; set; }   
    public string newValue { get; set; }
    public int Id { get; set; }
    public string Result { get; set; }  
    
    public JsonDataAccess(string _Type, int? _id, string? _newvalue) {
 	        Type= _Type;
	        Id = _id, 
	        newValue = _newvalue
    }

    public string GetJSonDataType() {
        return Type;        
    }
    Public String GetJSonNewData(){
	    return newValue
	  }

	  Public String GetJSonId(){
	    return Id
	  }
}




//test
using NUnit.Framework;
using GroceryStoreAPI.Controllers;

  
namespace Prime.UnitTests.Services
{
    [TestFixture]
    public class JData_Test
    {
        
//3 test
	[TestMethod]
	void JSONObjectDataTest()
	{
	  string _type="customers";
  	  string _nVale = "\"mylastName\"";
	  int _id=1;
	  string _date="2019-11-23"
	  int _customerid=1
	
    	// Arrange
    	var controller = new ValuesController();//new JsonDataAccess(_type, _id, _nVale));

    	// Act
	//CASE 1
	//API saving a customer
	//API saving a product
	_nVale = { id:1, Type:"customers", name:"john"};
    	var result= controller.Put(_nVale)
		Assert.AreEqual("success", controller.Result);
		
	//CASE 2
	//API saving a customer
	//.API saving a product
	_nVale = { Type:"customers", name:"john"};
	var result= controller.Post(_nVale)
	Assert.AreEqual("success", controller.Result);
	
	
	//CASE3	
	_id=1;
         _type="customers";
	var result= controller.Delete(_id,_type)
	Assert.AreEqual("success", controller.Result);
	
	//CASE 4
      // if your action was returning data in the body like: Ok<string>("data: 12")
      //API listing all customers
      //API listing all orders
     //API listing allproducts
         _id=1;
	_type="customers";
    	var actionResult = controller.Get(_type);
   	 OkNegotiatedContentResult<string> conNegResult = Assert.IsType<OkNegotiatedContentResult<string>>(actionResult);
   	Assert.Equal({name:"pan"}, conNegResult.Content)
    	//CASE5
	//API listing all orders for a given date - USE date, id, type
	//API retrieving an order - use type,id
	//API retrieving a customer - use id, type
	//API retrieving a product  - use id, type
	//API list a customer's orders  - use id, type, customeid
	//Get(int id, string Type, int customerid, string date) input parameters in this order for testing
       _id=1;
	_type="customers";
    	var actionResult = controller.Get(_id, _type);
   	 OkNegotiatedContentResult<string> conNegResult = Assert.IsType<OkNegotiatedContentResult<string>>(actionResult);
   	Assert.Equal({name:"pan"}, conNegResult.Content)
	}
    }
}
