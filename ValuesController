using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;

namespace GroceryStoreAPI.Controllers
{  
    [Route("api/[controller]")]
    [ApiController]
    public class ValuesController : ControllerBase
    {
    //test only    
   // private readonly IJDataProvider _jdataProviderr; 
   // public ValuesController(IJDataProvider jdataProvider)
    //{
    //  _jdataProviderr=jdataProviderr
   //}
//properties
   // public string Type { get; set; }   
   // public string newValue { get; set; }
  //  public int Id { get; set; }
   // public string Result { get; set; } 
//test above only


//variables
string filepath = "../database.json";
Var JData = new StreamReader(filepath).ReadToEnd()// load j data from j file
JObject jObjs = JObject.Parse(JData);
 char[] charsToTrim = {',', ' '};
 
// GET api/values search based on type such as customer, product, and order for a customer
//PI listing all customer
//API listing products
//listing all orders
        [HttpGet("{Type}")]
        public ActionResult<IEnumerable<string>> Get(string Type)
        {        
           var returnValue= string.empty;
 	    switch(Type)
	    {
	      case "customers"//PI listing all customer
		var names = jObjs["customers"].Children()["name"];
	        var list = new List<string>();
	         list.AddRange(names.Select(name => names.Value<string>()));
	        foreach (var item in list)
	              returnValue += "\"" + item +"\","
                	//finale format should be "pan","jonh"
	        break;
	        case "products"//API listing products
	           var products = jObjs["products"].Children();
              		foreach (var item in products ){
              		returnValue += "\"" + item[desription] +" " +item[price] + "\","  
		    //finale format should be "TV 300.0","table 56.7"
	            break;
	       case "orders"//listing all orders
	         var orders = jObjs["orders"].Children();
           	 foreach (var aOrder in orders {
                    //var name =GetCustomersById(aOrder["customerId"])  
			// returnValue += "\"" +nane+ "\",";
            	     var items = aOrder["items"].Children();
		      foreach (var itm in items ){
			   returnValue += "\"" + GetProductsById(itm["productId"]) + " " +itm["quantity"] + "\","  
			    //finale format should be "TV 2","table 5"
		       }           	 
	         }	 
	       break;
            default:
	    }
          return (returnValue.TrimEnd(charsToTrim)
        }

        // GET api/values/5 
	//API retrieving a customer
	//API retrieving a product
	//API retrieving an order
        //API retrieving an order
        [HttpGet("{id}/{Type}")]
        public ActionResult<string> Get(int id, string Type)
        {        
          var returnValue= string.empty;
 	        switch(Type)
	        {
	          case "customers"//API retrieving a customer
             		returnValue =GetCustomersById(Id)	 
	            break;
	          case "products" //API retrieving a product
             		 returnValue = GetProductsById(Id)   
	            break;
          	 case "orders" //API retrieving an order
		  
		  var orders = jObjs["orders"].Children();
           	   foreach (var aOrder in orders) {
		   
             	   	var name =GetCustomersById(aOrder["customerId"])
		   	returnValue += "\"" + name + "\"";
		  	 if aOrder["Id"]==Id
		   	{
            	    	    var items = aOrder["items"].Children();
		    	    foreach (var itm in items ){
				returnValue += "\"" + GetProductsById(itm["productId"]) +" " +itm["quantity"] + "\","  
		     	     }           	
	           	  }		
                   } //f e

             //finale format should be   "TV 3","table 2"
                break;
                default:
	      }
          return (returnValue.TrimEnd(charsToTrim)
            //return "value";
        }

	//API list a customer's orders	
	//API listing all orders for a given date
	[HttpGet("{id}/{Type}/{customerId}")]
        public ActionResult<string> Get(int id, string Type, int customerid)
        { 
	  //API list a customer's orders
		var orders = jObjs["orders"].Children();
           	 foreach (var item in orders ){
             	   var name =GetCustomersById(item["customerId"]) //get name
		   returnValue += "\"" + name + "\"";
		   if item["customerId"]==customerId
		   { //get items
            	    var items = tem["items"].Children();
		    foreach (var itm in items){
			returnValue += "\"" + GetProductsById(itm["productId"]) +" " +itm["quantity"] + "\","  
		      }           	
	          }		
             //finale format should be   "TV 3","table 2"
         ]
          return (returnValue.TrimEnd(charsToTrim)
       }



	//API listing all orders for a given date
	[HttpGet("{id}/{Type}/{date}")]
        public ActionResult<string> Get(int id, string Type, string date)
        { 
	  var orders = jObjs["orders"].Children();
           foreach (var item in orders) {
		var oDate =GetCustomersById(item["date"])
             	var name =GetCustomersById(item["customerId"]) //customer
		returnValue += "\"" + name + "\"";
		if item["date"]==date//date
		   {
            	    var items = tem["items"].Children();
		    foreach (var itm in items) {
			returnValue += "\"" + GetProductsById(itm["productId"]) +" " +itm["quantity"] + "\","  
		      }           	
	            }		
             }
		
             //finale format should be   "TV 3","table 2"
         
          return (returnValue.TrimEnd(charsToTrim)
             }//e
//date
        // POST api/values  var JData = {Type:"customers" Id:1, Name:"James" }
	//API saving a customer
	//API saving a product
        [HttpPost]
        public string Post([FromBody] JData value)
        { 
	string type= value["Type"];
	try{
          string filepath = "../database.json";
          switch(type)
          {
	      case"customers"
 	       using (StreamReader r = new StreamReader(filepath))
              {
                var json = r.ReadToEnd();
                var jobj = JObject.Parse(json);  
		         
 		var newId = max(jobj["customers"]["Id"])) + 1;
		var newCust= { Id:newId, name:value["name"]}
 		 jobj[customers]).Add(newCust)		
		}

                result = jobj.ToString();
                File.WriteAllText(filepath, result);              
            
	       break;
           case "products"
              using (StreamReader r = new StreamReader(filepath))
              {
                var json = r.ReadToEnd();
                var jobj = JObject.Parse(json);  
		
 		var newId = max(jobj["products"]["Id"])) + 1;
		var newJprod= { Id:newId, description:value["description"],price:value["price"]}
 		 jobj[products].Add(newprod)
		 }

                result = jobj.ToString();
                File.WriteAllText(filepath, result);              
	      break;
	     default:
            }  //switch    
	return "success"
 	}//try
	catch (Exception ex)
 	{
 	}
       }


        // PUT api/values/5 var JData = {Type:"customers", Id:1, name:"James" } for customer
	// JData = { Id:1,Type:"customers", description:"good", price:23 } for product
	//API saving a customer
	//API saving a product
        [HttpPut("{id}")]
        public string Put(int id, [FromBody] JData value)
        {
	string type= value["Type"];
	try{
          string filepath = "../database.json";
         
          switch(type)
          {
	      case"customers"
 	       using (StreamReader r = new StreamReader(filepath))
              {
                var json = r.ReadToEnd();
                var jobj = JObject.Parse(json);  
                foreach (var item in jobj[customers]) {
                if(item["id"] == value{"id"])
		 tem["name"] = value["name"];                           
                  }
	      }

                result = jobj.ToString();
                File.WriteAllText(filepath, result);              
            
	        break;
           	case "products"
   
              using (StreamReader r = new StreamReader(filepath))
              {
                var json = r.ReadToEnd();
                var jobj = JObject.Parse(json);  
		  
                  foreach (var item in jobj[products]) {
                  	if(item["id"] == value["id"])
                       {
			item["description"]=value["description"];
                       item["price"]=value["price"];
                      }             
                   }
		 }

                result = jobj.ToString();
                File.WriteAllText(filepath, result);              
	         break;
		default:
            }  //switch    
	return "success"
 	}//try
	catch (Exception ex)
 	{
 	}
        }//end

        // DELETE api/values/5
        [HttpDelete("{id}/{Type}")]
        public string Delete(int id, string Type)
        {
	try{
	 string filepath = "../database.json";
	  using (StreamReader r = new StreamReader(filepath))
          {
                var json = r.ReadToEnd();
                var jobj = JObject.Parse(json);
		var indx  = 0
          	switch(type)
          	{
		      case"customers"     
			 foreach (var item in jobj[customers]) {
                  	 if(item["id"] == id)
                         {
			 (jobj.customers as JArray).RemoveAt(indx);
			 break;
			 }
		         indx +=1
			
                        } //for  
			break;
			 case"products"     
			 foreach (var item in jobj[products]) {
                  	 if(item["id"] == id)
                         {
			 (jobj.products as JArray).RemoveAt(indx);
			 break;
			 }
		         indx +=1
			
                        } //for  
			break;
			default:
                   }
 			 	
		result = jobj.ToString();
                File.WriteAllText(filepath, result);                   
	      
		]//u
		retturn "success";
               }
	      catch (Exception ex)
 		{
 		}
        }
        
        //pan  /help functions********************************
        private string GetProductsById(int id)
        {
	        string returnValue=string.empty;
	        var products = jObjs["products"].Children();
	        foreach (var item in products) {
             if item["Id"]==id 
             //returnValue = "\"" + item["desription"] +" " +item["price"] + "\","  
 		        returnValue = "\"" + item["desription"]  + "\","  
            }
	        return (returnValue.TrimEnd(charsToTrim)
        }
        private string GetCustomersById(int id)
        {
	        string returnValue=string.empty;
	        var names = jObjs["customers"].Children();
	        foreach (var item in names) {
             if item["Id"]==id 
             returnValue = "\"" + item["name"] + "\","  
	}
	        return (returnValue.TrimEnd(charsToTrim)
        }
    }
}
